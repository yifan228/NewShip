//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""cbb81235-0171-47c0-804d-d43985fb1140"",
            ""actions"": [
                {
                    ""name"": ""LeftPush"",
                    ""type"": ""Value"",
                    ""id"": ""6857e50e-ee3c-4e24-9480-5fe10adc51ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightPush"",
                    ""type"": ""Value"",
                    ""id"": ""bfb5291a-c3af-4a45-ab0e-a624a828ea21"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftFire"",
                    ""type"": ""Button"",
                    ""id"": ""3c681d55-ad22-42bf-a14d-3b7247c2819d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightFire"",
                    ""type"": ""Button"",
                    ""id"": ""9a293297-2d27-467e-9543-41bacc8d0f84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CatchCargo"",
                    ""type"": ""Button"",
                    ""id"": ""2cb36e38-92dd-4b4f-9ca6-2a5c9f939350"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PullRope"",
                    ""type"": ""Value"",
                    ""id"": ""8eb50860-1f4b-480b-869e-e49a4a8875d2"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Square"",
                    ""type"": ""Button"",
                    ""id"": ""9a2d463a-0352-4c80-8a27-add27b3a80c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Triangle"",
                    ""type"": ""Button"",
                    ""id"": ""4ad4e179-1e17-46b9-9e5c-3ab63a8c7ffb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Circle"",
                    ""type"": ""Button"",
                    ""id"": ""1b499f5a-dcd1-4493-8337-f042090a9286"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""226cb0cf-a81a-40a6-97f1-cbbead6bfa99"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""85476699-c8ef-4dce-90c8-a1835eae3fc8"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPush"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cbf2f485-2434-4882-819e-2b850f235a21"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8d66fc6a-310b-4267-90c5-c5947c0ef877"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f7446859-fca6-40f6-bb61-726aaa75b5e5"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""77e90898-52b1-4601-bbb9-4514f5527ed9"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f89e686b-5361-4159-a4a2-073ca3c80c42"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2823154e-4b11-46b2-8ccd-d1e27cab64f9"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPush"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3ca8a7bd-2e12-4a52-8ce6-bb8daacb991c"",
                    ""path"": ""<Keyboard>/#(U)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8e05620b-8de5-4ec6-a8f7-000aa20f5223"",
                    ""path"": ""<Keyboard>/#(J)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e841439-3aa9-44f5-8744-e887695fdb7e"",
                    ""path"": ""<Keyboard>/#(H)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a08a6598-77f9-4549-bb78-7ddfe65ef9bb"",
                    ""path"": ""<Keyboard>/#(K)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""44d48253-8b46-440b-84f5-b5221aa76376"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba95f5f8-d6cb-44a7-ba33-d73d8d9b091c"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86b6d055-97f1-4982-8092-5760711d44fd"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CatchCargo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b543132-2dc4-4288-9cb4-9d17e100c720"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullRope"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6d4d537-3c48-4365-9a56-d330a1aab09c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Square"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff5fab97-9d45-44c5-abb9-7506807c2adb"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Triangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96da1114-08af-4182-b279-c0287231ad33"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InputDrive"",
            ""id"": ""4ffa7938-c591-4fa4-bd68-25732abfd428"",
            ""actions"": [
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""a7270f56-373e-4779-b998-123ad4bf196e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""b5d6a4b9-ba91-4b40-bf7c-b360f06e76de"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftShoulder"",
                    ""type"": ""Button"",
                    ""id"": ""8db2b03f-6fea-4a03-ab1e-081fa1243422"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightShoulder"",
                    ""type"": ""Button"",
                    ""id"": ""e102b2e5-1074-466a-af8e-fe3434b26f4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftStick"",
                    ""type"": ""Value"",
                    ""id"": ""12247e17-ebc5-46c2-9c47-bb7bb1591669"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStick"",
                    ""type"": ""Value"",
                    ""id"": ""b768ed47-ffd5-489a-bf5c-d40957d6b4e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""32aac7ba-b88b-4a72-b381-2d0ccd33a518"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbf000e4-aa27-4272-8baa-fdfe5ff89693"",
                    ""path"": ""<Keyboard>/#(V)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9708c2c-ffa5-4a36-9b87-4689acf1b773"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""197f3b2c-d938-4761-9e38-9656f3e41741"",
                    ""path"": ""<Keyboard>/#(M)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e390e3fa-bc7f-4092-818a-04f27923cfd3"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""480d7f14-9214-4171-9b0f-4dd265609fb8"",
                    ""path"": ""<Keyboard>/#(F)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46c2a743-17f5-47a9-8527-f956c534e178"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ef18aea-14c2-4412-ba12-79506ff791f3"",
                    ""path"": ""<Keyboard>/#(K)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca2b944a-2940-4190-816e-55f297486d4c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""229cc815-db7a-4cf0-b1e8-48707ae75b5e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_LeftPush = m_General.FindAction("LeftPush", throwIfNotFound: true);
        m_General_RightPush = m_General.FindAction("RightPush", throwIfNotFound: true);
        m_General_LeftFire = m_General.FindAction("LeftFire", throwIfNotFound: true);
        m_General_RightFire = m_General.FindAction("RightFire", throwIfNotFound: true);
        m_General_CatchCargo = m_General.FindAction("CatchCargo", throwIfNotFound: true);
        m_General_PullRope = m_General.FindAction("PullRope", throwIfNotFound: true);
        m_General_Square = m_General.FindAction("Square", throwIfNotFound: true);
        m_General_Triangle = m_General.FindAction("Triangle", throwIfNotFound: true);
        m_General_Circle = m_General.FindAction("Circle", throwIfNotFound: true);
        // InputDrive
        m_InputDrive = asset.FindActionMap("InputDrive", throwIfNotFound: true);
        m_InputDrive_LeftTrigger = m_InputDrive.FindAction("LeftTrigger", throwIfNotFound: true);
        m_InputDrive_RightTrigger = m_InputDrive.FindAction("RightTrigger", throwIfNotFound: true);
        m_InputDrive_LeftShoulder = m_InputDrive.FindAction("LeftShoulder", throwIfNotFound: true);
        m_InputDrive_RightShoulder = m_InputDrive.FindAction("RightShoulder", throwIfNotFound: true);
        m_InputDrive_LeftStick = m_InputDrive.FindAction("LeftStick", throwIfNotFound: true);
        m_InputDrive_RightStick = m_InputDrive.FindAction("RightStick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private List<IGeneralActions> m_GeneralActionsCallbackInterfaces = new List<IGeneralActions>();
    private readonly InputAction m_General_LeftPush;
    private readonly InputAction m_General_RightPush;
    private readonly InputAction m_General_LeftFire;
    private readonly InputAction m_General_RightFire;
    private readonly InputAction m_General_CatchCargo;
    private readonly InputAction m_General_PullRope;
    private readonly InputAction m_General_Square;
    private readonly InputAction m_General_Triangle;
    private readonly InputAction m_General_Circle;
    public struct GeneralActions
    {
        private @PlayerAction m_Wrapper;
        public GeneralActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPush => m_Wrapper.m_General_LeftPush;
        public InputAction @RightPush => m_Wrapper.m_General_RightPush;
        public InputAction @LeftFire => m_Wrapper.m_General_LeftFire;
        public InputAction @RightFire => m_Wrapper.m_General_RightFire;
        public InputAction @CatchCargo => m_Wrapper.m_General_CatchCargo;
        public InputAction @PullRope => m_Wrapper.m_General_PullRope;
        public InputAction @Square => m_Wrapper.m_General_Square;
        public InputAction @Triangle => m_Wrapper.m_General_Triangle;
        public InputAction @Circle => m_Wrapper.m_General_Circle;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void AddCallbacks(IGeneralActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Add(instance);
            @LeftPush.started += instance.OnLeftPush;
            @LeftPush.performed += instance.OnLeftPush;
            @LeftPush.canceled += instance.OnLeftPush;
            @RightPush.started += instance.OnRightPush;
            @RightPush.performed += instance.OnRightPush;
            @RightPush.canceled += instance.OnRightPush;
            @LeftFire.started += instance.OnLeftFire;
            @LeftFire.performed += instance.OnLeftFire;
            @LeftFire.canceled += instance.OnLeftFire;
            @RightFire.started += instance.OnRightFire;
            @RightFire.performed += instance.OnRightFire;
            @RightFire.canceled += instance.OnRightFire;
            @CatchCargo.started += instance.OnCatchCargo;
            @CatchCargo.performed += instance.OnCatchCargo;
            @CatchCargo.canceled += instance.OnCatchCargo;
            @PullRope.started += instance.OnPullRope;
            @PullRope.performed += instance.OnPullRope;
            @PullRope.canceled += instance.OnPullRope;
            @Square.started += instance.OnSquare;
            @Square.performed += instance.OnSquare;
            @Square.canceled += instance.OnSquare;
            @Triangle.started += instance.OnTriangle;
            @Triangle.performed += instance.OnTriangle;
            @Triangle.canceled += instance.OnTriangle;
            @Circle.started += instance.OnCircle;
            @Circle.performed += instance.OnCircle;
            @Circle.canceled += instance.OnCircle;
        }

        private void UnregisterCallbacks(IGeneralActions instance)
        {
            @LeftPush.started -= instance.OnLeftPush;
            @LeftPush.performed -= instance.OnLeftPush;
            @LeftPush.canceled -= instance.OnLeftPush;
            @RightPush.started -= instance.OnRightPush;
            @RightPush.performed -= instance.OnRightPush;
            @RightPush.canceled -= instance.OnRightPush;
            @LeftFire.started -= instance.OnLeftFire;
            @LeftFire.performed -= instance.OnLeftFire;
            @LeftFire.canceled -= instance.OnLeftFire;
            @RightFire.started -= instance.OnRightFire;
            @RightFire.performed -= instance.OnRightFire;
            @RightFire.canceled -= instance.OnRightFire;
            @CatchCargo.started -= instance.OnCatchCargo;
            @CatchCargo.performed -= instance.OnCatchCargo;
            @CatchCargo.canceled -= instance.OnCatchCargo;
            @PullRope.started -= instance.OnPullRope;
            @PullRope.performed -= instance.OnPullRope;
            @PullRope.canceled -= instance.OnPullRope;
            @Square.started -= instance.OnSquare;
            @Square.performed -= instance.OnSquare;
            @Square.canceled -= instance.OnSquare;
            @Triangle.started -= instance.OnTriangle;
            @Triangle.performed -= instance.OnTriangle;
            @Triangle.canceled -= instance.OnTriangle;
            @Circle.started -= instance.OnCircle;
            @Circle.performed -= instance.OnCircle;
            @Circle.canceled -= instance.OnCircle;
        }

        public void RemoveCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneralActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // InputDrive
    private readonly InputActionMap m_InputDrive;
    private List<IInputDriveActions> m_InputDriveActionsCallbackInterfaces = new List<IInputDriveActions>();
    private readonly InputAction m_InputDrive_LeftTrigger;
    private readonly InputAction m_InputDrive_RightTrigger;
    private readonly InputAction m_InputDrive_LeftShoulder;
    private readonly InputAction m_InputDrive_RightShoulder;
    private readonly InputAction m_InputDrive_LeftStick;
    private readonly InputAction m_InputDrive_RightStick;
    public struct InputDriveActions
    {
        private @PlayerAction m_Wrapper;
        public InputDriveActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTrigger => m_Wrapper.m_InputDrive_LeftTrigger;
        public InputAction @RightTrigger => m_Wrapper.m_InputDrive_RightTrigger;
        public InputAction @LeftShoulder => m_Wrapper.m_InputDrive_LeftShoulder;
        public InputAction @RightShoulder => m_Wrapper.m_InputDrive_RightShoulder;
        public InputAction @LeftStick => m_Wrapper.m_InputDrive_LeftStick;
        public InputAction @RightStick => m_Wrapper.m_InputDrive_RightStick;
        public InputActionMap Get() { return m_Wrapper.m_InputDrive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputDriveActions set) { return set.Get(); }
        public void AddCallbacks(IInputDriveActions instance)
        {
            if (instance == null || m_Wrapper.m_InputDriveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputDriveActionsCallbackInterfaces.Add(instance);
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @LeftShoulder.started += instance.OnLeftShoulder;
            @LeftShoulder.performed += instance.OnLeftShoulder;
            @LeftShoulder.canceled += instance.OnLeftShoulder;
            @RightShoulder.started += instance.OnRightShoulder;
            @RightShoulder.performed += instance.OnRightShoulder;
            @RightShoulder.canceled += instance.OnRightShoulder;
            @LeftStick.started += instance.OnLeftStick;
            @LeftStick.performed += instance.OnLeftStick;
            @LeftStick.canceled += instance.OnLeftStick;
            @RightStick.started += instance.OnRightStick;
            @RightStick.performed += instance.OnRightStick;
            @RightStick.canceled += instance.OnRightStick;
        }

        private void UnregisterCallbacks(IInputDriveActions instance)
        {
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @LeftShoulder.started -= instance.OnLeftShoulder;
            @LeftShoulder.performed -= instance.OnLeftShoulder;
            @LeftShoulder.canceled -= instance.OnLeftShoulder;
            @RightShoulder.started -= instance.OnRightShoulder;
            @RightShoulder.performed -= instance.OnRightShoulder;
            @RightShoulder.canceled -= instance.OnRightShoulder;
            @LeftStick.started -= instance.OnLeftStick;
            @LeftStick.performed -= instance.OnLeftStick;
            @LeftStick.canceled -= instance.OnLeftStick;
            @RightStick.started -= instance.OnRightStick;
            @RightStick.performed -= instance.OnRightStick;
            @RightStick.canceled -= instance.OnRightStick;
        }

        public void RemoveCallbacks(IInputDriveActions instance)
        {
            if (m_Wrapper.m_InputDriveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputDriveActions instance)
        {
            foreach (var item in m_Wrapper.m_InputDriveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputDriveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputDriveActions @InputDrive => new InputDriveActions(this);
    public interface IGeneralActions
    {
        void OnLeftPush(InputAction.CallbackContext context);
        void OnRightPush(InputAction.CallbackContext context);
        void OnLeftFire(InputAction.CallbackContext context);
        void OnRightFire(InputAction.CallbackContext context);
        void OnCatchCargo(InputAction.CallbackContext context);
        void OnPullRope(InputAction.CallbackContext context);
        void OnSquare(InputAction.CallbackContext context);
        void OnTriangle(InputAction.CallbackContext context);
        void OnCircle(InputAction.CallbackContext context);
    }
    public interface IInputDriveActions
    {
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnLeftShoulder(InputAction.CallbackContext context);
        void OnRightShoulder(InputAction.CallbackContext context);
        void OnLeftStick(InputAction.CallbackContext context);
        void OnRightStick(InputAction.CallbackContext context);
    }
}
